/**
 * Now that this is all working need to clean up
 * the redundancy which is horrible lol.
 */

.button,
button,
input[type='button'],
input[type='reset'],
input[type='submit'] {

  background-color: transparent;
  border: 0.1rem solid $color-gray-lighter;
  color: $color-gray;
  border-radius: $border-radius; 
  cursor: pointer;
  display: inline-block;
  font-size: $button-font-size;
  font-weight: 700;
  height: $button-height;
  line-height: $button-height;
  letter-spacing: 0.1rem;
  padding: 0 1.8rem;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;

  // transition: background-color 0.3s ease;

  &:focus,
  &:hover {
    background-color: $color-gray;
    color: $color-white;
    outline: 0;
  }

  &:focus {
    box-shadow: 0 0 0 0.125em rgba($color-gray, .3);
  }

  &[disabled] {
    cursor: default;
    opacity: 0.5;
    &:focus,
    &:hover {
      background-color: $color-gray;
      border-color: $color-gray;
    }
  }

  &.is-primary {

    background-color: $color-primary;
    border: 0.1rem solid $color-primary;
    color: $color-white;

    &:focus,
    &:hover {
      background-color: darken($color-primary, $button-darken-rate);
      border-color: darken($color-primary, $button-darken-rate);
      outline: 0;
    }

    &:focus {
      box-shadow: 0 0 0 0.125em rgba($color-primary, .3);
    }
  
    &[disabled] {

      &:focus,
      &:hover {
        background-color: $color-primary;
        border-color: $color-primary;
      }

    }

    &.is-light {

      background-color: $color-primary-light;
      border-color: $color-primary-light;
      color: $color-primary;

      &:focus,
      &:hover {
        background-color: darken($color-primary-light, $button-darken-rate / 2);
        border-color: darken($color-primary-light, $button-darken-rate / 2);
      }
  
      &:focus {
        box-shadow: 0 0 0 0.125em rgba($color-primary, .3);
      }
    
      &[disabled] {
  
        &:focus,
        &:hover {
          background-color: $color-primary-light;
          border-color: $color-primary-light;
        }
        
      }

    }

    &.is-outlined.is-light {
      &:focus,
      &:hover {
        border-color: darken($color-primary-light, $button-darken-rate);
      }
    }

  }

  &.is-success {

    background-color: $color-success;
    border: 0.1rem solid $color-success;
    color: $color-white;

    &:focus,
    &:hover {
      background-color: darken($color-success, $button-darken-rate);
      border-color: darken($color-success, $button-darken-rate);
      outline: 0;
    }

    &:focus {
      box-shadow: 0 0 0 0.125em rgba($color-success, .3);
    }
  

    &[disabled] {

      &:focus,
      &:hover {
        background-color: $color-success;
        border-color: $color-success;
      }
    }

    &.is-light {

      background-color: $color-success-light;
      border-color: $color-success-light;
      color: $color-success;

      &:focus,
      &:hover {
        background-color: darken($color-success-light, $button-darken-rate / 2);
        border-color: darken($color-success-light, $button-darken-rate / 2);
      }
  
      &:focus {
        box-shadow: 0 0 0 0.125em rgba($color-success, .3);
      }
    
      &[disabled] {
  
        &:focus,
        &:hover {
          background-color: $color-success-light;
          border-color: $color-success-light;
        }
        
      }

    }

    &.is-outlined.is-light {
      &:focus,
      &:hover {
        border-color: darken($color-success-light, $button-darken-rate);
      }
    }

  }

  &.is-warning {

    background-color: $color-warning;
    border: 0.1rem solid $color-warning;
    color: $color-white;

    &:focus,
    &:hover {
      background-color: darken($color-warning, $button-darken-rate);
      border-color: darken($color-warning, $button-darken-rate);
      outline: 0;
    }

    &:focus {
      box-shadow: 0 0 0 0.125em rgba($color-warning, .3);
    }
  

    &[disabled] {

      &:focus,
      &:hover {
        background-color: $color-warning;
        border-color: $color-warning;
      }
    }

    &.is-light {

      background-color: $color-warning-light;
      border-color: $color-warning-light;
      color: $color-warning;

      &:focus,
      &:hover {
        background-color: darken($color-warning-light, $button-darken-rate / 2);
        border-color: darken($color-warning-light, $button-darken-rate / 2);
      }
  
      &:focus {
        box-shadow: 0 0 0 0.125em rgba($color-warning, .3);
      }
    
      &[disabled] {
  
        &:focus,
        &:hover {
          background-color: $color-warning-light;
          border-color: $color-warning-light;
        }
        
      }

    }

    &.is-outlined.is-light {
      &:focus,
      &:hover {
        border-color: darken($color-warning-light, $button-darken-rate);
      }
    }

  }

  &.is-danger {

    background-color: $color-danger;
    border: 0.1rem solid $color-danger;
    color: $color-white;

    &:focus,
    &:hover {
      background-color: darken($color-danger, $button-darken-rate);
      border-color: darken($color-danger, $button-darken-rate);
      outline: 0;
    }

    &:focus {
      box-shadow: 0 0 0 0.125em rgba($color-danger, .3);
    }
  

    &[disabled] {

      &:focus,
      &:hover {
        background-color: $color-danger;
        border-color: $color-danger;
      }
    }

    &.is-light {

      background-color: $color-danger-light;
      border-color: $color-danger-light;
      color: $color-danger;

      &:focus,
      &:hover {
        background-color: darken($color-danger-light, $button-darken-rate / 2);
        border-color: darken($color-danger-light, $button-darken-rate / 2);
      }
  
      &:focus {
        box-shadow: 0 0 0 0.125em rgba($color-danger, .3);
      }
    
      &[disabled] {
  
        &:focus,
        &:hover {
          background-color: $color-danger-light;
          border-color: $color-danger-light;
        }
        
      }

    }

    &.is-outlined.is-light {
      &:focus,
      &:hover {
        border-color: darken($color-danger-light, $button-darken-rate);
      }
    }


  }

  &.is-dark {

    background-color: $color-gray-dark;
    border: 0.1rem solid $color-gray-dark;
    color: $color-white;

    &:focus,
    &:hover {
      background-color: darken($color-gray-dark, $button-darken-rate);
      border-color: darken($color-gray-dark, $button-darken-rate);
      outline: 0;
    }

    &:focus {
      box-shadow: 0 0 0 0.125em rgba($color-gray-dark, .3);
    }
  

    &[disabled] {

      &:focus,
      &:hover {
        background-color: $color-gray-dark;
        border-color: $color-gray-dark;
      }
    }

    &.is-light {

      background-color: $color-gray-lighter;
      border-color: $color-gray-lighter;
      color: $color-gray-dark;

      &:focus,
      &:hover {
        background-color: darken($color-gray-lighter, $button-darken-rate / 2);
        border-color: darken($color-gray-lighter, $button-darken-rate / 2);
      }
  
      &:focus {
        box-shadow: 0 0 0 0.125em rgba($color-gray-dark, .3);
      }
    
      &[disabled] {
  
        &:focus,
        &:hover {
          background-color: $color-gray-lighter;
          border-color: $color-gray-lighter;
        }
        
      }

    }

    &.is-outlined.is-light {
      &:focus,
      &:hover {
        border-color: darken($color-gray-lighter, $button-darken-rate);
      }
    }


  }

  &.is-small {
    font-size: $button-font-size-small;
    font-weight: 700;
    height: $button-height-small;
    letter-spacing: 0.1rem;
    line-height: $button-height-small + -.1rem; // just looks a little better with this adjustment.
    padding: 0 1.75rem;
    border-radius: $border-radius;
  }

  &.is-large {
    font-size: $button-font-size-large;
    font-weight: 700;
    height:$button-height-large;
    line-height: $button-height-large;
    padding: 0 4rem;
    border-radius: $border-radius-large;
  }

  &.is-outlined {

    background-color: transparent;
    color: $color-gray;
    // transition: background-color 0.3s ease;

    &:focus,
    &:hover {
      background-color: transparent;
      border-color: $color-gray; 
      color: darken($color-gray, $button-darken-rate-outlined);
    }

    &[disabled] {
      &:focus,
      &:hover {
        border-color: inherit;
        color: $color-gray;
      }
    }

    &.is-primary {

      background: transparent;
      color: $color-primary;

      &:focus,
      &:hover {
        background: transparent;
        border-color: darken($color-primary, $button-darken-rate-outlined);
        color: darken($color-primary, $button-darken-rate-outlined);
      }

      &[disabled] {
        &:focus,
        &:hover {
          border-color: inherit;
          color: $color-primary;
        }
      }

    }

    &.is-success {

      background: transparent;
      color: $color-success;

      &:focus,
      &:hover {
        background: transparent;
        border-color: darken($color-success, $button-darken-rate-outlined);
        color: darken($color-success, $button-darken-rate-outlined);
      }

      &[disabled] {
        &:focus,
        &:hover {
          border-color: inherit;
          color: $color-success;
        }
      }

    }

    &.is-warning {

      background: transparent;
      color: $color-warning;

      &:focus,
      &:hover {
        background: transparent;
        border-color: darken($color-warning, $button-darken-rate-outlined);
        color: darken($color-warning, $button-darken-rate-outlined);
      }

      &[disabled] {
        &:focus,
        &:hover {
          border-color: inherit;
          color: $color-warning;
        }
      }

    }

    &.is-danger {

      background: transparent;
      color: $color-danger;

      &:focus,
      &:hover {
        background: transparent;
        border-color: darken($color-danger, $button-darken-rate-outlined);
        color: darken($color-danger, $button-darken-rate-outlined);
      }

      &[disabled] {
        &:focus,
        &:hover {
          border-color: inherit;
          color: $color-danger;
        }
      }

    }

    &.is-dark {

      background: transparent;
      color: $color-gray-darker;

      &:focus,
      &:hover {
        background: transparent;
        border-color: darken($color-gray-dark, $button-darken-rate-outlined);
        color: darken($color-gray-dark, $button-darken-rate-outlined);
      }

      &[disabled] {
        &:focus,
        &:hover {
          border-color: inherit;
          color: $color-gray-dark;
        }
      }

    }

  }

  &.is-link {

    background-color: transparent !important;
    border-color: transparent !important;
    color: $color-gray;
    padding: 0;

    &:focus,
    &:hover {
      background-color: transparent;
      border-color: transparent;
      color: $color-gray;
    }

    &[disabled] {
      &:focus,
      &:hover {
        // color: $color-primary;
        color: $color-gray;
      }
    }

    &.is-primary {
      color: $color-primary;

      &:focus,
      &:hover {
        color: darken($color-primary, $button-darken-rate);
      }
  
      &[disabled] {
        &:focus,
        &:hover {
          color: $color-primary;
        }
      }

    }


  }

  &.is-rounded {
    border-radius: 290486px;
  }

  &.is-loading {

    pointer-events: none;
    color: transparent !important;
    position: relative;

    &:after {
      left: calc(50% - (#{$button-loading-height / 2}));
      top: calc(50% - (#{$button-loading-height / 2}));
      position: absolute !important;
      border: .4rem solid rgba($color-gray-lightest, .3); 
      border-top: .3rem solid rgba($color-gray-lightest, .9); 
      border-radius: 50%;
      width: $button-loading-height;
      height: $button-loading-height;
      animation: simpleSpin .5s linear infinite;
      display: block;
      content: '';
    }
  
  }

  &.is-loading.is-dark {
    &:after {
      border-color: $color-gray;
      border-top-color: $color-gray-dark;
    }
  }

  &.is-loading.is-primary {
    &:after {
      border-color: rgba($color-primary, .5);
      border-top-color: $color-primary;
    }
  }

}

.buttons {
  

  display: flex;
  justify-content: flex-start;

  .button,
  button,
  input[type='button'],
  input[type='reset'],
  input[type='submit'] {

    &:not(:last-child){
      margin-right: $spacer;
    }

  }

  &.is-centered {  justify-content: center; }
  &.is-right {  justify-content: flex-end; }

  &.is-grouped {

    @extend .prevent-flicker;

    .is-active {
      z-index: 3; // hides sibling border.
      pointer-events: none;
      background-color: $color-gray;
      border: 0.1rem solid $color-gray;
      color: $color-white;
    }

    .button,
    button,
    input[type='button'],
    input[type='reset'],
    input[type='submit'] {

      // override background/border here
      // when grouped use "is-active" 
      // to show toggled state.
      background-color: transparent;
      border: 0.1rem solid $color-gray-lighter;
      color: $color-gray;

      &:not(:last-child) {
        margin-right: -.1rem;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      &:not(:first-child) {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      &:last-child {
        margin-right: 0;
      }

      &:focus,
      &:hover {
        background-color: transparent;
        border-color: $color-gray; //  darken($color-gray, $button-darken-rate-outlined);
        color: darken($color-gray, $button-darken-rate-outlined);
        z-index: 4; // ensure border is seen or could be hidden behind shifted margin.
        outline: 0;
      }

      &.is-primary.is-active {
        background-color: $color-primary;
        border: 0.1rem solid $color-primary;
        color: $color-white;
      }

      &.is-success.is-active {
        background-color: $color-success;
        border: 0.1rem solid $color-success;
        color: $color-white;
      }

      &.is-warning.is-active {
        background-color: $color-warning;
        border: 0.1rem solid $color-warning;
        color: $color-white;
      }

      &.is-danger.is-active {
        background-color: $color-danger;
        border: 0.1rem solid $color-danger;
        color: $color-white;
      }

      &.is-dark.is-active {
        background-color: $color-gray-dark;
        border: 0.1rem solid $color-gray-dark;
        color: $color-white;
      }

    }

    &.is-rounded {

      .button,
      button,
      input[type='button'],
      input[type='reset'],
      input[type='submit'] {

        &:first-child {
          border-top-left-radius: 290486px;
          border-bottom-left-radius: 290486px;
        }
        &:last-child {
          border-top-right-radius: 290486px;
          border-bottom-right-radius: 290486px;
        }

      }

   
    }

  }

}


@keyframes simpleSpin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(359deg);
  }
}

