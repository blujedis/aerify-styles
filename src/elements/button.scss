:root {
  --loader-size: 20px;
  --loader-size-small: 14px;
  --loader-size-large: 30px;
}

$loader-size: var(--loader-size);
$loader-size-small: var(--loader-size-small);
$loader-size-large: var(--loader-size-large);

@mixin buttonSemantic($color, $lightness) {

  $color-light: lightness($color, $lightness);
  $color-light-darken: lightness($color, $lightness + 6);
  $color-light-font: lightness($color, 10%);

  @if str-index($string: #{$color}, $substring: 'dim') {
   $color-light-font: lightness($color, 60%);
  }

  background-color: $color;
  color: $color-white;
  border: rem(1px) solid $color;

  &:focus,
  &:hover {
    background-color: lightness($color, $button-darken-rate);
    border-color: lightness($color, $button-darken-rate); 
    outline: 0;
  }

  &:focus {
    box-shadow: 0 0 0 0.125em alpha($color, .3); 
  }

  &[disabled] {

    &:focus,
    &:hover {
      background-color: $color;
      border-color: $color;
    }

  }

  &.is-light {

    background-color: $color-light;
    border-color: $color-light;
    color: $color-light-font;

    &:focus,
    &:hover {
      background-color:   $color-light-darken;
      border-color:   $color-light-darken; 
    }

    &:focus {
      box-shadow: 0 0 0 0.125em alpha($color, .3); 
    }
  
    &[disabled] {

      &:focus,
      &:hover {
        background-color: $color-light;
        border-color: $color-light;
      }
      
    }

  }

  &.is-outlined.is-light {
    &:focus,
    &:hover {
      border-color:$color-light-darken;
    }
  }

}

@mixin buttonSemanticOutline($color, $lightness) {

  $color-outline-darken: lightness($color, $lightness + 6);

  background: transparent;
  color: $color;

  &:focus,
  &:hover {
    background: transparent;
    border-color: $color-outline-darken; 
    color: $color-outline-darken; 
  }

  &[disabled] {
    &:focus,
    &:hover {
      border-color: inherit;
      color: $color-primary;
    }
  }

}

@mixin buttonSemanticActive($color) {
  background-color: $color;
  border: rem(1px) solid $color;
  color: $color-white;
}

@mixin groupRounded() {

  .button,
  button,
  input[type='button'],
  input[type='reset'],
  input[type='submit'] {

    &:first-child {
      border-top-left-radius: 290486px;
      border-bottom-left-radius: 290486px;
    }
    &:last-child {
      border-top-right-radius: 290486px;
      border-bottom-right-radius: 290486px;
    }

  }

}

// @function calcLoader() {
//  $left: calc($button-loading-height / 2);
//  $right: calc($button-loading-height / 2);
// }

.button,
button,
input[type='button'],
input[type='reset'],
input[type='submit'] {

  background-color: transparent;
  border: rem(1px) solid $color-gray-lighter;
  color: $color-gray;
  border-radius: $border-radius; 
  cursor: pointer;
  font-size: $button-font-size;
  font-weight: 500;
  height: $button-height;
  line-height: $button-height;
  letter-spacing: rem(1px);
  padding: 0 rem(18px);
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;
  transition: background-color 0.3s ease;
  position: relative;

  &:focus,
  &:hover {
    background-color: $color-gray-lightest;
    outline: 0;
  }

  &:focus {
    box-shadow: 0 0 0 0.125em alpha(gray, .3); // rgba($color-gray, .3);
  }

  &[disabled] {
    cursor: default;
    opacity: 0.5;
    &:focus,
    &:hover {
      background-color: $color-gray;
      border-color: $color-gray;
    }
  }

  &.is-primary {
   @include buttonSemantic($color-primary, $color-primary-lightness);
  }

  &.is-success {
    @include buttonSemantic($color-success, $color-success-lightness);
  }

  &.is-warning {
    @include buttonSemantic($color-warning, $color-warning-lightness);
  }

  &.is-danger {
    @include buttonSemantic($color-danger, $color-danger-lightness);
  }

  &.is-dark {
    @include buttonSemantic($color-dark, $color-dark-lightness);
  }

  &.is-dim {
    @include buttonSemantic($color-dim, $color-dim-lightness);
  }

  &.is-small {
    font-size: $button-font-size-small;
    font-weight: 500;
    height: $button-height-small;
    letter-spacing: rem(1px);
    line-height: $button-height-small;
    padding: 0 rem(17.5px);
    border-radius: $border-radius;
  }

  &.is-large {
    font-size: $button-font-size-large;
    font-weight: 500;
    height:$button-height-large;
    line-height: $button-height-large;
    padding: 0 rem(40px);
    border-radius: $border-radius-large;
  }

  &.is-outlined {

    background-color: transparent;
    color: $color-gray;

    &:focus,
    &:hover {
      background-color: transparent;
      border-color: $color-gray-light; 
      color: lightness($color-gray, 10%);
    }

    &[disabled] {
      &:focus,
      &:hover {
        border-color: inherit;
        color: $color-gray;
      }
    }

    &.is-primary {
      @include buttonSemanticOutline($color-primary, $button-darken-rate);
    }

    &.is-success {
      @include buttonSemanticOutline($color-success, $button-darken-rate);
    }

    &.is-warning {
      @include buttonSemanticOutline($color-warning, $button-darken-rate);
    }

    &.is-danger {
      @include buttonSemanticOutline($color-danger, $button-darken-rate);
    }

    &.is-dark {
      @include buttonSemanticOutline($color-dark, $button-darken-rate);
    }
    
    &.is-dim {
      @include buttonSemanticOutline($color-dim, $button-darken-rate);
    }

  }

  &.is-link {

    background-color: transparent !important;
    border-color: transparent !important;
    color: $color-gray;
    padding: 0;

    &:focus,
    &:hover {
      background-color: transparent;
      border-color: transparent;
      color: $color-gray;
    }

    &[disabled] {
      &:focus,
      &:hover {
        // color: $color-primary;
        color: $color-gray;
      }
    }

    &.is-primary {
      color: $color-primary;

      &:focus,
      &:hover {
        color: lightness(primary, $button-darken-rate); // darken($color-primary, $button-darken-rate);
      }
  
      &[disabled] {
        &:focus,
        &:hover {
          color: $color-primary;
        }
      }

    }


  }

  &.is-rounded {
    border-radius: 290486px;
  }

  &.is-loading-left {

    pointer-events: none;
    padding-left: calc(#{$loader-size} * 2);
  
    &:before {
      content: '';
      box-sizing: border-box;
      position: absolute;
      top: 50%;
      left: calc(#{$loader-size} / 1.75); 
      width: $loader-size;
      height: $loader-size;
      will-change: transform;
      margin-top: calc(#{$loader-size} / -2); 
      // margin-left: - math.div($loader-size, 2);
      border-radius: 50%;
      border: 3px solid $color-gray-lighter;
      border-top-color: $color-gray;
      animation: spinner .6s linear infinite;
    }

    // &.is-right {
    //   padding-right: calc(#{$loader-size} * 1.75);
    //   &:after {
    //      right: calc(#{$loader-size} / 1.75); 
    //   }
    // }



    // &:after {
    //   // left: calc(50% - (#{math.div($button-loading-height,2)}));
    //   // top: calc(50% - (#{math.div($button-loading-height,2)}));
    //   left:  30px / 2;
    //   top: 30px / 2;
    //   position: absolute !important;
    //   border: rem(4px) solid alpha(gray-lightest, .3); // rgba($color-gray-lightest, .3); 
    //   border-top: rem(3px) solid alpha(gray-lightest, .9); // rgba($color-gray-lightest, .9); 
    //   border-radius: 50%;
    //   width: 30px;
    //   height: 30px;
    //   animation: simpleSpin .5s linear infinite;
    //   display: block;
    //   content: '';
    // }
  
  }
  
  &.is-loading-right {

    pointer-events: none;
    padding-right: calc(#{$loader-size} * 2);
  
    &:before {
      content: '';
      box-sizing: border-box;
      position: absolute;
      top: 50%;
      right: calc(#{$loader-size} / 1.75); 
      width: $loader-size;
      height: $loader-size;
      will-change: transform;
      margin-top: calc(#{$loader-size} / -2); 
      // margin-left: - math.div($loader-size, 2);
      border-radius: 50%;
      border: 3px solid $color-gray-lighter;
      border-top-color: $color-gray;
      animation: spinner .6s linear infinite;
    }

    // &.is-right {
    //   padding-right: calc(#{$loader-size} * 1.75);
    //   &:after {
    //      right: calc(#{$loader-size} / 1.75); 
    //   }
    // }



    // &:after {
    //   // left: calc(50% - (#{math.div($button-loading-height,2)}));
    //   // top: calc(50% - (#{math.div($button-loading-height,2)}));
    //   left:  30px / 2;
    //   top: 30px / 2;
    //   position: absolute !important;
    //   border: rem(4px) solid alpha(gray-lightest, .3); // rgba($color-gray-lightest, .3); 
    //   border-top: rem(3px) solid alpha(gray-lightest, .9); // rgba($color-gray-lightest, .9); 
    //   border-radius: 50%;
    //   width: 30px;
    //   height: 30px;
    //   animation: simpleSpin .5s linear infinite;
    //   display: block;
    //   content: '';
    // }
  
  }



}

.buttons {
  
  display: flex;
  justify-content: flex-start;
  gap: $spacer;

  &.is-centered {  justify-content: center; }
  &.is-right {  justify-content: flex-end; }
  &.is-grouped {

    @extend .prevent-flicker;
    gap: 0;

    .button,
    button,
    input[type='button'],
    input[type='reset'],
    input[type='submit'] {

       background-color: transparent;
       border: rem(1px) solid $color-gray-lighter;
       color: $color-gray;

      &:not(:last-child) {
        margin-right: -1px;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      &:not(:first-child) {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      &:last-child {
        margin-right: 0;
      }

      &:focus,
      &:hover {
        background-color: $color-gray-lightest;
        z-index: 4; // ensure border is seen or could be hidden behind shifted margin.
        outline: 0;
      }

      &.is-active {
        z-index: 3; // hides sibling border.
        pointer-events: none;
        background-color: $color-gray;
        border: rem(1px) solid $color-gray;
        color: $color-white;
       }

      &.is-primary.is-active {
        @include buttonSemanticActive($color-primary);
      }

      &.is-success.is-active {
        @include buttonSemanticActive($color-success);
      }

      &.is-warning.is-active {
        @include buttonSemanticActive($color-warning);
      }

      &.is-danger.is-active {
        @include buttonSemanticActive($color-danger);
      }

      &.is-dark.is-active {
        @include buttonSemanticActive($color-dark);
      }

      &.is-dim.is-active {
        @include buttonSemanticActive($color-dim);
      }

    }

    &.is-rounded {
      @include groupRounded();
    }

  }


}

@media screen and (max-width: 20rem) {
  .buttons { 
    flex-flow: row wrap;
  }
}

// Tablet, large than phone.
@media screen and (min-width: $breakpoint-tablet) {
  .buttons { 
    flex-flow: row wrap;
  }
}

// Larger than Tablet is Desktop
@media screen and (min-width: $breakpoint-desktop) {
  .buttons { 
    flex-flow: row wrap;
  }
}

// Extra large Desktop 24" monitor and up.
@media screen and (min-width: $breakpoint-wide) {
  .buttons { 
    flex-flow: row wrap;
  }
}

// Extra wide Desktop 27" or above
@media screen and (min-width: $breakpoint-ultrawide) {
 .buttons {}
}

@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(359deg);
  }
}